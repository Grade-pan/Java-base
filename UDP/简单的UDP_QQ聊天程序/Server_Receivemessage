import javax.swing.*;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Server_ReceiveMessage extends Thread {
    private DatagramSocket serverSocket; //服务器套接字
    private DatagramPacket packet;  //报文
    private List<User> userList = new ArrayList<User>(); //用户列表
    private byte[] data = new byte[8096]; //8K字节数组
    private Server_UI parentUI; //消息窗口
    private static Connection c = null;
    private static Statement s = null;
    private static Boolean flag=false;


    public Server_ReceiveMessage(DatagramSocket socket, Server_UI parentUI) {
        serverSocket = socket;
        this.parentUI = parentUI;
    }

    @Override
    public void run() {
        connect_mysql(parentUI);//连接数据库
        while (true) { //循环处理收到的各种消息
            try {
                packet = new DatagramPacket(data, data.length);//构建接收报文
                serverSocket.receive(packet);//接收客户机数据
                //收到的数据转为消息对象
                Message msg = (Message) Translate.ByteToObject(packet.getData());
                String userId = msg.getUserId();//当前消息来自用户的id
                if (msg.getType().equalsIgnoreCase("M_LOGIN")) { //是M_LOGIN消息
                    Message backMsg = new Message();
                    //匹配数据库内容
                    String sql = "select user_id from user_list";
                    ResultSet rs = s.executeQuery(sql);
                    while (rs.next()) {
                        String user_id = rs.getString(1);
                        if(userId.equals(user_id)){
                            flag=true;
                        }
                    }
                    if (flag==false) {//登录不成功
                        backMsg.setType("M_FAILURE");
                        byte[] buf = Translate.ObjectToByte(backMsg);
                        DatagramPacket backPacket = new DatagramPacket(buf, buf.length, packet.getAddress(), packet.getPort());//向登录用户发送的报文
                        serverSocket.send(backPacket); //发送
                    } else { //登录成功
                        backMsg.setType("M_SUCCESS");
                        byte[] buf = Translate.ObjectToByte(backMsg);
                        DatagramPacket backPacket = new DatagramPacket(buf, buf.length, packet.getAddress(), packet.getPort());//向登录用户发送的报文
                        serverSocket.send(backPacket); //发送

                        User user = new User();
                        user.setUserId(userId); //用户名
                        user.setPacket(packet); //保存收到的报文
                        userList.add(user); //将新用户加入用户列表

                        //更新服务器聊天室大厅
                        parentUI.txtArea.append(userId + " 登录！\n");

                        //向所有其他在线用户发送M_LOGIN消息，向新登录者发送整个用户列表
                        for (int i = 0; i < userList.size(); i++) { //遍历整个用户列表
                            //向其他在线用户发送M_LOGIN消息
                            if (!userId.equalsIgnoreCase(userList.get(i).getUserId())) {
                                DatagramPacket oldPacket = userList.get(i).getPacket();
                                DatagramPacket newPacket = new DatagramPacket(data, data.length, oldPacket.getAddress(), oldPacket.getPort());//向其他用户发送的报文
                                serverSocket.send(newPacket); //发送
                            }//end if
                            //向当前用户回送M_ACK消息，将第i个用户加入当前用户的用户列表
                            Message other = new Message();
                            other.setUserId(userList.get(i).getUserId());
                            other.setType("M_ACK");
                            byte[] buffer = Translate.ObjectToByte(other);
                            DatagramPacket newPacket = new DatagramPacket(buffer, buffer.length, packet.getAddress(), packet.getPort());
                            serverSocket.send(newPacket);
                        }
                    }
                } else if (msg.getType().equalsIgnoreCase("M_MSG")) { //是M_MSG消息
                    //更新显示
                    parentUI.txtArea.append(userId + " 说：" + msg.getText() + "\n");
                    //转发消息
                    for (int i = 0; i < userList.size(); i++) { //遍历用户
                        DatagramPacket oldPacket = userList.get(i).getPacket();
                        DatagramPacket newPacket = new DatagramPacket(data, data.length, oldPacket.getAddress(), oldPacket.getPort());
                        serverSocket.send(newPacket); //发送
                    }
                } else if (msg.getType().equalsIgnoreCase("M_QUIT")) { //是M_QUIT消息
                    //更新显示
                    parentUI.txtArea.append(userId + " 下线！\n");
                    //删除用户
                    for (int i = 0; i < userList.size(); i++) {
                        if (userList.get(i).getUserId().equals(userId)) {
                            userList.remove(i);
                            break;
                        }
                    }
                    //向其他用户转发下线消息
                    for (int i = 0; i < userList.size(); i++) {
                        DatagramPacket oldPacket = userList.get(i).getPacket();
                        DatagramPacket newPacket = new DatagramPacket(data, data.length, oldPacket.getAddress(), oldPacket.getPort());
                        serverSocket.send(newPacket);
                    }
                }
            } catch (IOException | NumberFormatException | SQLException ex) {
            }
        }
    }

    private static void connect_mysql(Server_UI parentUI) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Java?characterEncoding=utf8&useSSL=false&serverTimezone=UTC",
                    "root", "123456");
            //JOptionPane.showMessageDialog(null, "数据库连接成功", "提示", JOptionPane.INFORMATION_MESSAGE);
            parentUI.txtArea.append("连接数据库成功\n");
            s = c.createStatement();
            //System.out.println("获取Statement对象：" + s);
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, "数据库连接失败", "提示", JOptionPane.ERROR_MESSAGE);
        }
    }

}
